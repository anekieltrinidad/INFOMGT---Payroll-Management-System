//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PayrollSystem
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PayrollSystemEntities : DbContext
    {
        public PayrollSystemEntities()
            : base("name=PayrollSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<PersonalDetail> PersonalDetails { get; set; }
        public virtual DbSet<Salary> Salaries { get; set; }
        public virtual DbSet<SalariesAudit> SalariesAudits { get; set; }
        public virtual DbSet<SalariesHistory> SalariesHistories { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<viewEmployeeRecord> viewEmployeeRecords { get; set; }
        public virtual DbSet<viewSalaryRecord> viewSalaryRecords { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int uspDeleteSalary(Nullable<int> salaryID)
        {
            var salaryIDParameter = salaryID.HasValue ?
                new ObjectParameter("salaryID", salaryID) :
                new ObjectParameter("salaryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteSalary", salaryIDParameter);
        }
    
        public virtual ObjectResult<uspGetEmployeesRecords_Result> uspGetEmployeesRecords(Nullable<int> search)
        {
            var searchParameter = search.HasValue ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetEmployeesRecords_Result>("uspGetEmployeesRecords", searchParameter);
        }
    
        public virtual ObjectResult<uspGetSalaryRecordsByID_Result> uspGetSalaryRecordsByID(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSalaryRecordsByID_Result>("uspGetSalaryRecordsByID", empIDParameter);
        }
    
        public virtual int uspInsertSalary(Nullable<int> empID, Nullable<decimal> dailyRate, Nullable<int> workdays, Nullable<System.DateTime> forMonth, Nullable<bool> status)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var dailyRateParameter = dailyRate.HasValue ?
                new ObjectParameter("dailyRate", dailyRate) :
                new ObjectParameter("dailyRate", typeof(decimal));
    
            var workdaysParameter = workdays.HasValue ?
                new ObjectParameter("workdays", workdays) :
                new ObjectParameter("workdays", typeof(int));
    
            var forMonthParameter = forMonth.HasValue ?
                new ObjectParameter("forMonth", forMonth) :
                new ObjectParameter("forMonth", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertSalary", empIDParameter, dailyRateParameter, workdaysParameter, forMonthParameter, statusParameter);
        }
    
        public virtual int uspUpdateSalary(Nullable<int> salaryID, Nullable<int> empID, Nullable<decimal> dailyRate, Nullable<int> workdays, Nullable<System.DateTime> forMonth, Nullable<bool> status)
        {
            var salaryIDParameter = salaryID.HasValue ?
                new ObjectParameter("salaryID", salaryID) :
                new ObjectParameter("salaryID", typeof(int));
    
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var dailyRateParameter = dailyRate.HasValue ?
                new ObjectParameter("dailyRate", dailyRate) :
                new ObjectParameter("dailyRate", typeof(decimal));
    
            var workdaysParameter = workdays.HasValue ?
                new ObjectParameter("workdays", workdays) :
                new ObjectParameter("workdays", typeof(int));
    
            var forMonthParameter = forMonth.HasValue ?
                new ObjectParameter("forMonth", forMonth) :
                new ObjectParameter("forMonth", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateSalary", salaryIDParameter, empIDParameter, dailyRateParameter, workdaysParameter, forMonthParameter, statusParameter);
        }
    
        public virtual ObjectResult<uspGetSalaryRecordsByID1_Result> uspGetSalaryRecordsByID1(Nullable<int> empID)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSalaryRecordsByID1_Result>("uspGetSalaryRecordsByID1", empIDParameter);
        }
    
        public virtual ObjectResult<string> checkEmployeeDepartment(Nullable<int> search)
        {
            var searchParameter = search.HasValue ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("checkEmployeeDepartment", searchParameter);
        }
    
        public virtual int uspRegisterUser(Nullable<int> empID, string username, string password)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRegisterUser", empIDParameter, usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> uspCheckEmployeeDepartment(Nullable<int> search)
        {
            var searchParameter = search.HasValue ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspCheckEmployeeDepartment", searchParameter);
        }
    
        public virtual ObjectResult<uspGetLoginCredentials_Result> uspGetLoginCredentials(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetLoginCredentials_Result>("uspGetLoginCredentials", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> checkEmployeeDepartment1(Nullable<int> search)
        {
            var searchParameter = search.HasValue ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("checkEmployeeDepartment1", searchParameter);
        }
    }
}
